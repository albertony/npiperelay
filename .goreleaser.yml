before:
  hooks:
    - 'go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo@latest'
    - 'goversioninfo
      -platform-specific
      -ver-major="{{ .Major }}" -product-ver-major="{{ .Major }}"
      -ver-minor="{{ .Minor }}" -product-ver-minor="{{ .Minor }}"
      -ver-patch="{{ .Patch }}" -product-ver-patch="{{ .Patch }}"
      -file-version="{{ .Version }}+{{ .FullCommit }}" -product-version="{{ .Version }}+{{ .FullCommit }}"'

builds:
- binary: npiperelay
  goos:
    - windows
  goarch:
    - 386
    - amd64

archives:
  # Publish archived binaries (.zip).
  # Use .zip format for Windows, instead of the default .tar.gz,
  # and one archive for each arch (386 and amd64):
  #    npiperelay_windows_386.zip
  #    npiperelay_windows_amd64.zip
  # Archives will contain the binary with name npiperelay.exe.
  # Note: Using same name and content as the original upstream release,
  # so they can be used as drop-in replacements.
  - id: zip
    name_template: "{{ .ProjectName }}_{{ .Os }}_{{ .Arch }}"
    format_overrides:
      - goos: windows
        format: zip
  # Publish raw binaries (.exe).
  # One for each arch (386 and amd64):
  #    npiperelay_windows_386.exe
  #    npiperelay_windows_amd64.exe
  # Redundant, since the binaries are already published in the archives, but
  # these are convenient for direct download, while we still want the archives
  # for backwards compatibility with the original upstream release.
  # Note that the binary names are different from those included in the
  # archives, which are npiperelay.exe in both cases, to get unique name
  # for the two arch variants.
  - id: binary
    format: binary
    name_template: "{{ .Binary }}_{{ .Os }}_{{ .Arch }}"

checksum:
  name_template: "{{ .ProjectName }}_checksums.txt"
  # OLD: Before publishing raw binaries the following would include the checksum
  # of the raw binaries (.exe) included in the archives (.zip). When publishing
  # the raw binaries their checksums will already be included by default.
  #extra_files:
  #  - glob: "./dist/{{ .ProjectName }}_windows_386/{{ .ProjectName }}.exe"
  #    name_template: "{{ .ProjectName }}_windows_386/{{ .ProjectName }}.exe"
  #  - glob: "./dist/{{ .ProjectName }}_windows_amd64_v1/{{ .ProjectName }}.exe"
  #    name_template: "{{ .ProjectName }}_windows_amd64_v1/{{ .ProjectName }}.exe"

changelog:
  sort: asc

release:
  draft: true
  replace_existing_draft: true
  header: |
    Release of the forked project, containing some improvements on top of [upstream](https://github.com/jstarks/npiperelay) release [v0.1.0](https://github.com/jstarks/npiperelay/releases/tag/v0.1.0). See release notes for the first release, [v1.0.0](https://github.com/albertony/npiperelay/releases/tag/v1.0.0), for background. Full changelog listing all commits since previous fork release further down.

    <!--
    Checksums (SHA-256):
    - 386/x86/32-bit:
      - npiperelay_windows_386.zip: `??`
      - npiperelay.exe: `??`
    - amd64/x64/64-bit:
      - npiperelay_windows_amd64.zip: `??`
      - npiperelay.exe: `??`

    VirusTotal scan results:
    - 386/x86/32-bit:
      - [npiperelay_windows_386.zip](https://www.virustotal.com/gui/url/??)
      - [npiperelay.exe](https://www.virustotal.com/gui/file/??)
    - amd64/x64/64-bit
      - [npiperelay_windows_amd64.zip](https://www.virustotal.com/gui/url/??)
      - [npiperelay.exe](https://www.virustotal.com/gui/file/??)
    -->

    At the time of the release, no security vendors on [VirusTotal](https://www.virustotal.com) flag the zip download urls as malicious, but some do flag the executable. If this worries you, you can always check for yourself by reading through the less than 300 lines of go code, plus the single, commonly used, third party dependency, and then build from source. If your local antivirus treats the executable as suspicious or malicious, you should try to report it as a false positive, e.g. to [Symantec](https://symsubmit.symantec.com).
